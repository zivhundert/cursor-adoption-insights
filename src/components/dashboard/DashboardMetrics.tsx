import { useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { HelpCircle } from 'lucide-react';
import { CursorDataRow } from '@/pages/Index';
import { useSettings } from "@/contexts/SettingsContext";

interface DashboardMetricsProps {
  data: CursorDataRow[];
  originalData: CursorDataRow[];
  baseFilteredData: CursorDataRow[];
}

export const DashboardMetrics = ({ data, originalData, baseFilteredData }: DashboardMetricsProps) => {
  const { settings } = useSettings();

  const metrics = useMemo(() => {
    // Use baseFilteredData for totals (respects user/date filters but not time period)
    const totalAcceptedLines = baseFilteredData.reduce((sum, row) => {
      // Skip aggregated rows
      if (row.Email.includes('active users')) return sum;
      return sum + (parseInt(row['Chat Accepted Lines Added']) || 0);
    }, 0);

    const activeUsers = new Set(
      baseFilteredData
        .filter(row => !row.Email.includes('active users')) // Skip aggregated rows
        .filter(row => row['Is Active'] === 'true')
        .map(row => row.Email)
    ).size;

    // Calculate acceptance rate from filtered data (should be affected by time period)
    const filteredAcceptedLines = data.reduce((sum, row) => {
      return sum + (parseInt(row['Chat Accepted Lines Added']) || 0);
    }, 0);

    const filteredSuggestedLines = data.reduce((sum, row) => {
      return sum + (parseInt(row['Chat Suggested Lines Added']) || 0);
    }, 0);

    const acceptanceRate = filteredSuggestedLines > 0 
      ? ((filteredAcceptedLines / filteredSuggestedLines) * 100).toFixed(1)
      : '0';

    // Estimate dev hours saved (dynamic lines per minute)
    const estimatedHoursSaved = Math.round(totalAcceptedLines / (settings.linesPerMinute * 60));

    // Calculate money saved (existing metric)
    const estimatedMoneySaved = estimatedHoursSaved * settings.pricePerHour;

    // Calculate annual Cursor cost
    const annualCursorCost = activeUsers * settings.cursorPricePerUser * 12;

    // Calculate ROI as a percentage
    const roi = annualCursorCost > 0 
      ? ((estimatedMoneySaved / annualCursorCost) * 100).toFixed(1)
      : '0';

    return {
      totalAcceptedLines: totalAcceptedLines.toLocaleString(),
      activeUsers,
      acceptanceRate: `${acceptanceRate}%`,
      estimatedHoursSaved: estimatedHoursSaved.toLocaleString(),
      estimatedMoneySaved: `$${estimatedMoneySaved.toLocaleString()}`,
      roi: `${roi}%`,
    };
  }, [data, originalData, baseFilteredData, settings.linesPerMinute, settings.pricePerHour, settings.cursorPricePerUser]);

  const metricCards = [
    {
      title: 'Code Generated by AI',
      value: metrics.totalAcceptedLines,
      gradient: 'from-blue-500 to-blue-600',
      tooltip: 'Total sum of all accepted lines for the selected filters. Not affected by time period selection.'
    },
    {
      title: 'AI Suggestion Acceptance Rate',
      value: metrics.acceptanceRate,
      gradient: 'from-emerald-500 to-emerald-600',
      tooltip: 'Percentage of suggested lines that were accepted in the current selection. Formula: (Accepted Lines / Suggested Lines) × 100'
    },
    {
      title: 'Development Time Saved (Hours)',
      value: metrics.estimatedHoursSaved,
      gradient: 'from-teal-500 to-teal-600',
      tooltip: `Estimated development hours saved based on accepted lines for the selected filters. 
        Calculation uses your team's current lines per minute value of ${settings.linesPerMinute}. 
        Formula: Total Accepted Lines ÷ (Lines per minute × 60) = Hours Saved. Not affected by time period selection.`
    },
    {
      title: 'Money Saved',
      value: metrics.estimatedMoneySaved,
      gradient: 'from-green-500 to-green-600',
      tooltip: `Estimated money saved based on development time saved and your hourly rate of $${settings.pricePerHour}. 
        Formula: Hours Saved × Price per Hour = Money Saved. Not affected by time period selection.`
    },
    {
      title: 'ROI (Return on Investment)',
      value: metrics.roi,
      gradient: 'from-purple-500 to-purple-600',
      tooltip: `Return on Investment comparing money saved vs annual Cursor costs. 
        Formula: (Money Saved ÷ Annual Cursor Cost) × 100. 
        Annual cost = ${metrics.activeUsers} users × $${settings.cursorPricePerUser}/month × 12 months = $${(metrics.activeUsers * settings.cursorPricePerUser * 12).toLocaleString()}.`
    },
    {
      title: 'Active Users',
      value: metrics.activeUsers.toString(),
      gradient: 'from-indigo-500 to-indigo-600',
      tooltip: 'Number of unique active users for the selected filters. Not affected by time period selection.'
    },
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6">
      {metricCards.map((metric, index) => (
        <Card key={index} className="overflow-hidden h-full">
          <CardHeader className={`bg-gradient-to-br ${metric.gradient} text-white pb-3 min-h-[80px] flex flex-col justify-center`}>
            <div className="flex items-start justify-between gap-2">
              <CardTitle className="text-sm font-medium opacity-90 leading-tight flex-1">
                {metric.title}
              </CardTitle>
              <Popover>
                <PopoverTrigger className="shrink-0">
                  <HelpCircle className="h-4 w-4 text-white opacity-75 hover:opacity-100 hover:scale-110 transition-all cursor-pointer" />
                </PopoverTrigger>
                <PopoverContent>
                  <p className="max-w-xs">{metric.tooltip}</p>
                </PopoverContent>
              </Popover>
            </div>
          </CardHeader>
          <CardContent className="pt-6 pb-6 flex items-center justify-center min-h-[80px]">
            <div className="text-3xl font-bold text-foreground text-center">
              {metric.value}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};
