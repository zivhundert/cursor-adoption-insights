
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { CursorDataRow } from '@/pages/Index';
import { calculateMetrics } from './metricsCalculator';

export const exportToPDF = async (data: CursorDataRow[], filters: any) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Add title
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text('AI Development Intelligence Report', 20, 30);
  
  // Add date and filter info
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  const reportDate = new Date().toLocaleDateString();
  pdf.text(`Generated: ${reportDate}`, 20, 45);
  
  // Add filter information
  let yPosition = 60;
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Report Filters:', 20, yPosition);
  
  yPosition += 10;
  pdf.setFontSize(10);
  pdf.setTextColor(80, 80, 80);
  
  if (filters.dateRange.from || filters.dateRange.to) {
    const fromDate = filters.dateRange.from ? filters.dateRange.from.toLocaleDateString() : 'Start';
    const toDate = filters.dateRange.to ? filters.dateRange.to.toLocaleDateString() : 'End';
    pdf.text(`Date Range: ${fromDate} to ${toDate}`, 25, yPosition);
    yPosition += 8;
  }
  
  if (filters.selectedUsers.length > 0) {
    pdf.text(`Selected Users: ${filters.selectedUsers.length} users`, 25, yPosition);
    yPosition += 8;
  }
  
  pdf.text(`Aggregation: ${filters.aggregationPeriod}`, 25, yPosition);
  yPosition += 15;
  
  // Calculate and add key metrics
  const baseFilteredData = data; // Assuming data is already filtered
  const metrics = calculateMetrics(data, baseFilteredData, {
    linesPerMinute: 50,
    pricePerHour: 75,
    cursorPricePerUser: 20
  });
  
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Key Metrics:', 20, yPosition);
  yPosition += 15;
  
  const metricsData = [
    ['Code Generated by AI', metrics.totalAcceptedLines],
    ['AI Suggestion Acceptance Rate', metrics.acceptanceRate],
    ['Development Time Saved', metrics.estimatedHoursSaved],
    ['Development Cost Savings', metrics.estimatedMoneySaved],
    ['ROI - Cursor Investment Return', metrics.roi],
    ['Active Users', metrics.activeUsers.toString()]
  ];
  
  pdf.setFontSize(10);
  metricsData.forEach(([label, value]) => {
    pdf.setTextColor(80, 80, 80);
    pdf.text(label + ':', 25, yPosition);
    pdf.setTextColor(40, 40, 40);
    pdf.text(value, 120, yPosition);
    yPosition += 8;
  });
  
  // Capture dashboard charts as image and add to PDF
  try {
    const dashboardElement = document.querySelector('[data-export="dashboard-charts"]');
    if (dashboardElement) {
      const canvas = await html2canvas(dashboardElement as HTMLElement, {
        scale: 1,
        useCORS: true,
        allowTaint: true
      });
      
      const imgData = canvas.toDataURL('image/png');
      const imgWidth = pageWidth - 40;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      if (yPosition + imgHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      
      pdf.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
    }
  } catch (error) {
    console.warn('Could not capture charts for PDF export:', error);
  }
  
  // Save the PDF
  pdf.save(`ai-intelligence-report-${reportDate.replace(/\//g, '-')}.pdf`);
};

export const exportToImage = async () => {
  const element = document.querySelector('[data-export="dashboard-main"]');
  if (!element) {
    throw new Error('Dashboard element not found');
  }

  const canvas = await html2canvas(element as HTMLElement, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
    backgroundColor: '#ffffff'
  });

  const link = document.createElement('a');
  link.download = `ai-intelligence-dashboard-${new Date().toISOString().split('T')[0]}.png`;
  link.href = canvas.toDataURL();
  link.click();
};

export const exportToCSV = (data: CursorDataRow[], originalData: CursorDataRow[], filters: any) => {
  // Create CSV headers
  const headers = Object.keys(data[0] || {});
  
  // Convert data to CSV format
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        const value = row[header as keyof CursorDataRow];
        return typeof value === 'string' && value.includes(',') ? `"${value}"` : value;
      }).join(',')
    )
  ].join('\n');
  
  // Create and download file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `ai-intelligence-data-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const generateShareableLink = (filters: any) => {
  const baseUrl = window.location.origin + window.location.pathname;
  const params = new URLSearchParams();
  
  if (filters.dateRange.from) {
    params.set('from', filters.dateRange.from.toISOString().split('T')[0]);
  }
  if (filters.dateRange.to) {
    params.set('to', filters.dateRange.to.toISOString().split('T')[0]);
  }
  if (filters.selectedUsers.length > 0) {
    params.set('users', filters.selectedUsers.join(','));
  }
  if (filters.aggregationPeriod !== 'day') {
    params.set('period', filters.aggregationPeriod);
  }
  
  return params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;
};
