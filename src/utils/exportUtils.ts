
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { CursorDataRow } from '@/pages/Index';
import { calculateMetrics } from './metricsCalculator';

export const exportToPDF = async (data: CursorDataRow[], filters: any) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Add title
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text('AI Development Intelligence Report', 20, 30);
  
  // Add date and filter info
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  const reportDate = new Date().toLocaleDateString();
  pdf.text(`Generated: ${reportDate}`, 20, 45);
  
  // Add filter information
  let yPosition = 60;
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Report Filters:', 20, yPosition);
  
  yPosition += 10;
  pdf.setFontSize(10);
  pdf.setTextColor(80, 80, 80);
  
  if (filters.dateRange.from || filters.dateRange.to) {
    const fromDate = filters.dateRange.from ? filters.dateRange.from.toLocaleDateString() : 'Start';
    const toDate = filters.dateRange.to ? filters.dateRange.to.toLocaleDateString() : 'End';
    pdf.text(`Date Range: ${fromDate} to ${toDate}`, 25, yPosition);
    yPosition += 8;
  }
  
  if (filters.selectedUsers.length > 0) {
    pdf.text(`Selected Users: ${filters.selectedUsers.length} users`, 25, yPosition);
    yPosition += 8;
  }
  
  pdf.text(`Aggregation: ${filters.aggregationPeriod}`, 25, yPosition);
  yPosition += 15;
  
  // Calculate and add key metrics
  const baseFilteredData = data; // Assuming data is already filtered
  const metrics = calculateMetrics(data, baseFilteredData, {
    linesPerMinute: 50,
    pricePerHour: 75,
    cursorPricePerUser: 20
  });
  
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Key Metrics:', 20, yPosition);
  yPosition += 15;
  
  const metricsData = [
    ['Code Generated by AI', metrics.totalAcceptedLines],
    ['AI Suggestion Acceptance Rate', metrics.acceptanceRate],
    ['Development Time Saved', metrics.estimatedHoursSaved],
    ['Development Cost Savings', metrics.estimatedMoneySaved],
    ['ROI - Cursor Investment Return', metrics.roi],
    ['Active Users', metrics.activeUsers.toString()]
  ];
  
  pdf.setFontSize(10);
  metricsData.forEach(([label, value]) => {
    pdf.setTextColor(80, 80, 80);
    pdf.text(label + ':', 25, yPosition);
    pdf.setTextColor(40, 40, 40);
    pdf.text(value, 120, yPosition);
    yPosition += 8;
  });
  
  // Add some space before charts
  yPosition += 10;
  
  // Capture dashboard charts as image and add to PDF
  try {
    const dashboardElement = document.querySelector('[data-export="dashboard-charts"]') as HTMLElement;
    if (dashboardElement) {
      console.log('Capturing dashboard charts for PDF...');
      
      // Wait a bit for charts to fully render
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const canvas = await html2canvas(dashboardElement, {
        scale: 1.5,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        width: dashboardElement.scrollWidth,
        height: dashboardElement.scrollHeight,
        scrollX: 0,
        scrollY: 0
      });
      
      const imgData = canvas.toDataURL('image/png');
      const imgWidth = pageWidth - 40;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      console.log(`Chart image dimensions: ${imgWidth}x${imgHeight}`);
      
      // Check if we need a new page for the charts
      if (yPosition + imgHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
        pdf.setFontSize(14);
        pdf.setTextColor(40, 40, 40);
        pdf.text('Dashboard Charts:', 20, yPosition);
        yPosition += 15;
      }
      
      pdf.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
    } else {
      console.warn('Dashboard charts element not found');
    }
  } catch (error) {
    console.error('Error capturing charts for PDF export:', error);
  }
  
  // Save the PDF
  pdf.save(`ai-intelligence-report-${reportDate.replace(/\//g, '-')}.pdf`);
};

export const exportToImage = async () => {
  const element = document.querySelector('[data-export="dashboard-main"]') as HTMLElement;
  if (!element) {
    throw new Error('Dashboard element not found');
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
    backgroundColor: '#ffffff'
  });

  const link = document.createElement('a');
  link.download = `ai-intelligence-dashboard-${new Date().toISOString().split('T')[0]}.png`;
  link.href = canvas.toDataURL();
  link.click();
};
